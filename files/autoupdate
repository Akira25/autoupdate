#!/bin/ash

#load json-functions
. /usr/share/libubox/jshn.sh

#load config file
CLIENT_NAME=$(uci -q get autoupdate.backup.client_name)
CLIENT_USER=$(uci -q get autoupdate.backup.client_user)
CLIENT_PATH=$(uci -q get autoupdate.backup.client_path)

ROUTER=$(uci -q get autoupdate.router.router)
TYPE=$(uci -q get autoupdate.router.type)
AUTO=$(uci -q get autoupdate.automode.automode)

PATH_BIN=$(uci -q get autoupdate.internal_settings.path_bin)
PATH_JSON=$(uci -q get autoupdate.internal_settings.path_json)
PATH_BAK=$(uci -q get autoupdate.internal_settings.path_bak)
JSON_LINK=$(uci -q get autoupdate.internal_settings.json_link)
LOG_FILE=$(uci -q get autoupdate.internal_settings.log_file)
LAST_UPGR=$(uci -q get autoupdate.upgrade_date.last_upgr)


### function stuff ###

get_router () {
  if [ "$ROUTER" = "0" ]; then
    ROUTER=$(grep machine /proc/cpuinfo | cut -d':' -f 2 | cut -c 2-)
  fi
}

get_type () {
  #get uplinktype.
  if [ "$TYPE" = "0" ]; then
    UPLINK=$(uci -q get ffberlin-uplink.preset.current)
    if [ "$UPLINK" = "tunnelberlin_tunneldigger" ]; then
      TYPE="tunneldigger"
    else
      TYPE="default"
    fi
  fi
}

do_backup () {
  TODAY=$(date -u +%Y-%m-%d)
  HOSTNAME=$(uci -q get system.@system[0].hostname)
  sysupgrade -b "$PATH_BAK"
}

do_auto_backup () {
  do_backup
  if [ ! -d /root/backup ]; then
    mkdir /root/backup/
  fi
  rm /root/backup/*
  cp "$PATH_BAK" "/root/backup/""$TODAY""_$HOSTNAME"".tar.gz"
  #preserve backup-files (just for auto-update)
  grep -q "/root/backup/" /etc/sysupgrade.conf
  if [ $? = 1 ]; then
    echo "/root/backup/" >> /etc/sysupgrade.conf
  fi
}

chk_upgr () {
  #check if there happened any changes in the link-file
  JSON=$(cat $PATH_JSON)
  json_load "$JSON"
  json_get_var JDATE date
  if [ $JDATE -lt $LAST_UPGR ]; then
    logger -t "autoupgrade" "Updatecheck: No updates avaiable."
    echo "No updates avaiable."
    exit 0
  fi
}

get_def () {
  wget -q $JSON_LINK -O $PATH_JSON
}

get_link () {
  JSON=$(cat $PATH_JSON)
  json_load "$JSON"
  json_get_var JDATE date
  json_select "$ROUTER"
  json_get_var LINK $TYPE
  if [ -z "$LINK" ]; then
    logger -t "autoupdate" "No upgrade done. This router is not supported by autoupgrade."
    exit 0
  fi
}

get_bin () {
  wget $LINK -O $PATH_BIN
}

write_update_date () {
  TODAY=$(date -u +%Y%m%d)
  uci set autoupdate.upgrade_date.last_upgr="$TODAY"
  uci commit autoupdate
}




### automatic backup ###

if [ "$1" = "a" ] && [ "$AUTO" = "on" -o "$AUTO" = "true" -o "$AUTO" = "1" -o "$AUTO" = "yes" ]; then
  get_def
  if [ ! -e $PATH_JSON ]; then
    echo "Link definition file cannot be downloaded. Internet connection might be lost."
    logger -t "autoupdate" "ERROR: Link definition file cannot be downloaded."
    exit 1
  fi
  chk_upgr
  do_auto_backup
  get_router
  get_type
  get_link
  get_bin
  if [ ! -e $PATH_BIN ]; then
    echo "sysupgrade.bin cannot be downloaded. Internet connection might be lost."
    logger -t "autoupdate" "ERROR: sysupgrade.bin cannot be downloaded."
    exit 1
  fi
  write_update_date
  sysupgrade $PATH_BIN
  logger -t "autoupdate" "ERROR: Update failed."
  exit 1
fi

if [ "$1" = "a" ] && [ "$AUTO" != "on" -o "$AUTO" != "true" -o "$AUTO" != "1" -o "$AUTO" != "yes" ]; then
  echo "Automatic mode is set off in config file. Set it on in /etc/config/autoupdate "
  exit 1
fi

### manual backup ###

echo "Get the link definition file..."
get_def

if [ ! -e $PATH_JSON ]; then
  echo "Link definition file cannot be downloaded. Internet connection might be lost."
  echo ""
  exit 1
  else
  echo "Completed."
fi

#Check for upgrades
chk_upgr


#do backup
read -p "Do you want to do a backup? (y/n): " BACKUP

if [ $BACKUP != "y" -a $BACKUP != "n" ]; then
  echo "Error: Input is neither 'y' nor 'n'"
  until [ $BACKUP =  "y" -o $BACKUP = "n" ]; do
    read -p "Please give a valid value (y/n): " BACKUP
  done
fi

if [ $BACKUP = "y" ]; then
  if [ "$CLIENT_NAME" = "complete-hostname" ] && [ "$CLIENT_USER" = "user" ] && [ "$CLIENT_PATH" = "/complete/path/to/your/backups/" ]; then
    echo ""
    echo "You must specify some settings for this feature."
    echo "Have a look at: /etc/config/autoupdate"
    echo ""
    exit 1
  fi

  #backup the current router settings
  do_backup
  scp "$PATH_BAK" "$CLIENT_USER""@$CLIENT_NAME"":$CLIENT_PATH""$TODAY""_$HOSTNAME"".tar.gz"
fi


if [ $? == 1 ]; then
  echo ""
  echo "ERROR: Backup failed. The values given in the config file may be incorrect."
  echo ""
  exit 1
fi

get_router
get_type

echo ""
echo "Router model is: $ROUTER"
echo "Routers uplink type is: $TYPE"
echo ""


read -p "Is that right? (y/n): " C
if [ "$C" = "n" ]; then
  echo "Auto recognition failed. Please download the right firmware yourself."
  echo ""
  exit 1
fi

if [ "$C" != "y" -a "$C" != "n" ]; then
  echo "Error: Input is neither 'y' nor 'n'"
  until [ "$C" =  "y" -o "$C" = "n" ]; do
    read -p "Please give a valid value (y/n): " C
  done
fi


#get the right download link from json-file
get_link


echo "Get firmware file..."
wget $LINK -O $PATH_BIN

echo ""
read -p "Please confirm the upgrade by typing 'yes': " B
if [ "$B" != "yes" ];then
  echo "ERROR: Input is not 'yes'."
  echo "You may upgrade your Router manually using:"
  echo ""
  echo "sysupgrade $PATH_BIN"
  echo ""
  echo "Extiting programm..."
  exit 1
fi

echo ""
echo "Start flashing the image now."
write_update_date

sysupgrade $PATH_BIN
